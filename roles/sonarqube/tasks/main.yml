---
- name: download require tool on RedHat"
  yum:
    name: "{{item}}"
    state: present
  loop:
    - wget
    - vi
    - curl
    - unzip
  when: ansible_os_family == "RedHat"
- name: Install java on debian
  apt:
    name: "{{java_debian}}"
    state: present
  when: ansible_os_family == "Debian"
- name: Install java on RedHat
  yum:
    name: "{{java_redhat}}"
    state: present
  when: ansible_os_family == "RedHat"

- name: Add repo Postgres in RedHat
  get_url:
    url: "{{postgres.repo_redhat}}"
    dest: "{{postgres.dest_repo}}"
  when: ansible_os_family == "RedHat"
- name: config repo
  yum:
    name: "{{postgres.dest_repo}}"
    state: present
  when: ansible_os_family == "RedHat"
- name: Update epel-release
  yum:
    name: epel-release
    state: latest
  when: ansible_os_family == "RedHat"

- name: Install Postgresql in Debian
  apt:
    name: postgresql-12
    state: present
  when: ansible_os_family == "Debian"
- name: Install Postgresql in RedHat
  yum:
    name: "{{item}}"
    state: present
  loop:
    - postgresql14
    - postgresql14-server
    - postgresql14-contrib
  when: ansible_os_family == "RedHat"

- name: Install Python package for PostgreSQL on Debian
  ansible.builtin.package:
    name: python3-psycopg2
    state: present
  when: ansible_os_family == "Debian"
- name: Install Python package for PostgreSQL on RedHat
  ansible.builtin.package:
    name: python-psycopg2
    state: present
  when: ansible_os_family == "RedHat"

- name: Initialize database cluster
  shell: /usr/pgsql-14/bin/postgresql-14-setup initdb
  when: ansible_os_family == "RedHat"
- name: start service postgres
  service:
    name: postgresql-14
    state: started
  when: ansible_os_family == "RedHat"

- name: create user in postgresql
  postgresql_user:
    state: present
    name: "{{postgres.user}}"
    password: "{{postgres.user_password}}"
  become: yes
  become_user: postgres

- name: create database in postgresql
  postgresql_db:
    state: present
    name: "{{postgres.db_name}}"
  become: yes
  become_user: postgres

- name: grant db user
  postgresql_privs:
    type: database
    database: "{{postgres.db_name}}"
    roles: "{{postgres.user}}"
    grant_option: no
    privs: all
  become: yes
  become_user: postgres

- name: Install sonarqube
  get_url:
    url: "{{sonar.zip}}"
    dest: /opt

- name: create new user nexus
  ansible.builtin.user:
    name: sonar
    state: present



- name: unarchive resource sonar
  ansible.builtin.unarchive:
    src: "{{sonar.dir_zip}}"
    dest: "/opt"
    owner: sonar
    group: sonar
    remote_src: yes

- name: Setting access to the database
  lineinfile:
    path: "{{sonar.directory}}/conf/sonar.properties"
    regex: "{{item.regex}}"
    line: "{{item.line}}"
  loop:
    - {regex: '^sonar.jdbc.username=*', line: 'sonar.jdbc.username=sonar'}
    - {regex: '^sonar.jdbc.password=* ', line: 'sonar.jdbc.password=sonar'}


- name: create file service sonar
  ansible.builtin.file:
    path: "/etc/systemd/system/sonar.service"
    state: touch
- name: Copy file service sonar
  template:
    src: "roles/sonarqube/templates/sonar.j2"
    dest: "/etc/systemd/system/sonar.service"


- name: start service sonar
  systemd:
    name: sonar.service
    state: started
    enabled: yes
    daemon_reload: yes
